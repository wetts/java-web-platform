内部类的使用规范：
	1> 对于同一个包中的其它类来说，内部类能够隐藏起来。（将内部类用private修饰即可） 
	2> 内部类可以被定义为抽象类 
	3> 内部类可以定义与外部类同名的变量
		* 如果内部类没有与外部类同名的变量，在内部类中可以直接访问外部类的实例变量
		* 如果内部类中有与外部类同名的变量，直接用变量名访问的是内部类的变量，
		  用this.变量名访问的也是内部类变量，用外部类名.this.内部类变量名访问的是外部类变量。

1> 成员内部类：如同类的普通成员一样。
	1) 成员类必须依赖外部类而存在；
	2) 不能定义任何静态成员、方法和类；
	3) 可以访问外部类的所有变量或方法；
	4) 先有外部类后有内部类，静态方法要先创建外部对象。
2> 静态内部类：类静态成员。
	1) 可以有静态、非静态成员；
	2) 内部类只可以访问外部类的静态成员和方法；
	3) 如同一个单独的类，在类外部访问是加入外部类前缀，在类内部访问可以不加前缀。
3> 局部内部类：成员方法的成员变量。
	1) 不可由static、public、protected、private修饰；
	2) 不能定义任何静态成员、方法和类；
	3) 可以访问外部类的所有变量和方法；
	4) 访问的局部变量必须是final变量；
	5) 外部类只有在方法体内才能操作此类。
4> 匿名内部类：在某些情况下，我们只需要内部类的一个对象，那么我们就没有必要给内部类命名，没有名字的内部类我们称为匿名内部类。
	1) 不能有构造方法；
	2) 不能定义任何静态成员、方法和类；
	3) 不可由static、public、protected、private修饰；
	4) 只能创建匿名内部类的一个实例。
		ps:一般代码行只有少量几行（5--7）。
	5) 以下情况使用匿名内部类可以达到很好的效果： 
		只用到类的一个实例；
		类在定义后马上用到； 
		类非常小（SUN 推荐是在 4 行代码以下）；
		给类命名并不会导致你的代码更容易被理解。 
