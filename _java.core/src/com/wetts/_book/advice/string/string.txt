1>  推荐使用String直接量赋值
2>  注意方法中传递的参数要求
3>  正确使用String、StringBuffer、StringBuilder
	使用String类的场景
		在字符串不经常变化的场景中可以使用String类
	使用StringBuffer类的场景
		在频繁进行字符串的运算，并且运行在多线程的环境中
	使用StringBuilder类的场景
		在频繁进行字符串的运算，并且运行在单线程的环境中
4>  注意字符串的位置
5>  自由选择字符串拼接方法
	“+”方法拼接字符串
		str + "c"代码如下：
			str = new StringBuilder(str).append("c").toString();
	concat方法拼接字符串
		每次的concat操作都会新创建一个String对象，这就是concat速度慢下来的原因
	append方法拼接字符串
		整个append方法都在做字符数组处理，加长，然后数组拷贝，没有新建任何对象
6>  推荐在复杂字符串操作中使用正则表达式
7>  强烈建议使用UTF编码
	Java文件编码
		文件的编码格式就是操作系统默认的格式。如果使用IDE工具创建的，如Eclipse，则依赖于IDE的设置
	Class文件编码
		通过javac命令生成的后缀名为.class的文件是UTF-8编码的UNICODE文件，
8>  对字符串排序持一种宽容的心态
