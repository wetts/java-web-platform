/**
 * 单一模式（Singleton Pattern）
 * 定义：Ensure a class has only instance, and provide a global point of access to it.（确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。）
 * <p>
 * ---
 * 单例模式的优点：
 * 由于单利模式的内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。
 * 由于单利模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要比较多额资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永久驻留内存的方式来解决。
 * 单例模式可以避免资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。
 * 单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。
 * <p>
 * ---
 * 单例模式的缺点：
 * 单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。
 * 单例模式对测试是不利的。
 * 单例模式与单一职责原则有冲突。
 * <p>
 * ---
 * 单例模式的使用场景：
 * 要求生成唯一序列号的环境；
 * 在整个项目中需要一个共享访问点或共享数据；
 * 创建一个对象需要消耗的资源过多；
 * 需要定义大量的静态常量和静态方法的环境。
 * <p>
 * ---
 * 单例模式的注意事项：
 * 若系统压力增大，并发量增加时则可能在内存中出现多个实例。
 * 需要考虑对象的复制情况。
 * 需要注意JVM的垃圾回收机制。
 * <p>
 * ---
 * 如何解决单利对象长久不适用被JVM回收的问题：
 * 由容器管理单例的生命周期；
 * 状态随时记录。
 *
 * @author wetts
 * @created 2015/08/25
 */
package com.wetts.designpattern.singleton;