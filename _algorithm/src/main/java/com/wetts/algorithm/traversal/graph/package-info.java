/**
 * 在图形结构中，节点之间的关系是任意的，图中任意两个数据元素之间都有可能相关。
 * <p>
 * 图G由两个集合V(顶点Vertex)和E(边Edge)组成，定义为G=(V，E)
 * <p>
 * 名词概念：
 * 1. 顶点的度：
 * 对于无向图，顶点的度表示以该顶点作为一个端点的边的数目。
 * 对于有向图，顶点的度分为入度和出度。入度表示以该顶点为终点的入边数目，出度是以该顶点为起点的出边数目，该顶点的度等于其入度和出度之和。
 * 2. 连通图(无向图)：
 * 连通图是指图G中任意两个顶点Vi和Vj都连通，则称为连通图。
 * 3. 强连通图(有向图)
 * 强连通图是对于有向图而言的，与无向图的连通图类似。
 * 4. 网
 * 带”权值”的连通图称为网。
 * <p>
 * 1. 对于一个图，若每条边都是没有方向的，则称该图为无向图。
 * 无向图的顶点集和边集分别表示为：
 * V(G)={V1，V2，V3，V4，V5}
 * E(G)={(V1，V2)，(V1，V4)，(V2，V3)，(V2，V5)，(V3，V4)，(V3，V5)，(V4，V5)}
 * <p>
 * 2. 若每条边都是有方向的，则称该图为有向图。
 * 有向图的顶点集和边集分别表示为：
 * V(G)={V1，V2，V3}
 * E(G)={<V1，V2>，<V2，V3>，<V3，V1>，<V1，V3>}
 * <p>
 * 我们将具有n(n-1)/2条边的无向图称为无向完全图。同理，将具有n(n-1)条边的有向图称为有向完全图。
 * <p>
 * 图的两种存储结构
 * 1. 邻接矩阵，原理就是用两个数组，一个数组保存顶点集，一个数组保存边集。下面的算法实现里边我们也是采用这种存储结构。
 * <p>
 * 2. 邻接表，邻接表是图的一种链式存储结构。这种存储结构类似于树的孩子链表。对于图G中每个顶点Vi，把所有邻接于Vi的顶点Vj链成一个单链表，这个单链表称为顶点Vi的邻接表。
 * <p>
 * 图的遍历算法
 *
 * @author wetts
 * @created 2016-08-05
 */
package com.wetts.algorithm.traversal.graph;
